
#+title: Kubernetes on Pi using kubeadm

* 00. Setup machines and operation machines
Hostname information, machines.txt
#+begin_src txt
192.168.68.106 server.kubernetes.local server 10.244.0.0/24
192.168.68.111 node-0.kubernetes.local node-0 10.244.1.0/24
192.168.68.112 node-1.kubernetes.local node-1 10.244.2.0/24
#+end_src
Distribute hostname config
#+begin_src sh
while read IP FQDN HOST SUBNET; do
    CMD="sed -i 's/^127.0.1.1.*/127.0.1.1\t${FQDN} ${HOST}/' /etc/hosts"
    ssh -i secrets/sshkey -n root@${IP} "$CMD"
    ssh -i secrets/sshkey -n root@${IP} hostnamectl set-hostname ${HOST}
    ssh -i secrets/sshkey -n root@${IP} systemctl restart systemd-hostnamed
done < machines.txt

while read IP FQDN HOST SUBNET; do
    ssh -i secrets/sshkey -n root@${IP} hostname --fqdn
done < machines.txt

# Operation machine
while read IP FQDN HOST SUBNET; do
    ENTRY="${IP} ${FQDN} ${HOST}"
    echo $ENTRY >> hosts
done < machines.txt

while read IP FQDN HOST SUBNET; do
    scp -i secrets/sshkey hosts root@${HOST}:~/
    ssh -i secrets/sshkey -n \
        root@${HOST} "cat hosts >> /etc/hosts && rm hosts"
done < machines.txt
#+end_src
* 01. Prepare binaries
Download binaries
#+begin_src sh
ARCH=arm64
BASEDIR=downloads
DLDIR=${BASEDIR}/${ARCH}
mkdir -p ${DLDIR}

wget -q --show-progress --https-only --timestamping \
     -i downloads.${ARCH}.txt \
     -P ${DLDIR}
#+end_src
Extract
#+begin_src sh
ARCH=arm64
DLDIR=downloads/${ARCH}
OUTPUTDIR=${DLDIR}/binaries
mkdir -p ${OUTPUTDIR}/cni-plugins
tar -xvf ${DLDIR}/containerd-2.1.1-linux-${ARCH}.tar.gz \
    --strip-components 1 \
    -C ${OUTPUTDIR}
tar -xvf ${DLDIR}/cni-plugins-linux-arm-v1.7.1.tgz \
    --strip-components 1 \
    -C ${OUTPUTDIR}/cni-plugins
tar -xvf ${DLDIR}/crictl-v1.33.0-linux-${ARCH}.tar.gz \
    -C ${OUTPUTDIR}

mv ${DLDIR}/runc.${ARCH} ${OUTPUTDIR}/runc
chmod +x ${OUTPUTDIR}/runc
#+end_src
* 02. Install containerd
Copy files
#+begin_src sh
ARCH="arm64"
while read IP FQDN HOST SUBNET; do
    # runc
    scp -i secrets/sshkey \
        downloads/${ARCH}/binaries/{runc,crictl} \
        root@${HOST}:/usr/local/bin

    scp -i secrets/sshkey \
        downloads/${ARCH}/binaries/{containerd,containerd-shim-runc-v2,containerd-stress} \
        root@${HOST}:/bin
    
    # CNI plugins
    ssh -i secrets/sshkey -n root@${HOST} mkdir -p /opt/cni/bin/
    scp -i secrets/sshkey \
        downloads/${ARCH}/binaries/cni-plugins/* \
        root@${HOST}:/opt/cni/bin

    ssh -i secrets/sshkey -n root@${HOST} mkdir -p /etc/cni/net.d/
    
    # containerd configuration file
    ssh -i secrets/sshkey -n root@${HOST} mkdir -p /etc/containerd
    scp -i secrets/sshkey \
        ./configs/containerd-config.toml \
        root@${HOST}:/etc/containerd/config.toml
    
    # containerd.service unit file
    scp -i secrets/sshkey \
        ./units/containerd.service \
        root@${HOST}:/etc/systemd/system
done < machines.txt
#+end_src
Enable and start service
#+begin_src sh
while read IP FQDN HOST SUBNET; do
    ssh -i secrets/sshkey -n root@${HOST} "systemctl daemon-reload && systemctl enable --now containerd"
    ssh -i secrets/sshkey -n root@${HOST} "systemctl restart containerd"
done < machines.txt
#+end_src
kubelet and kubectl
#+begin_src sh
chmod +x downloads/${ARCH}/{kubelet,kubectl,kubeadm}
# copy kubelet service for server
for HOST in server; do
    scp -i secrets/sshkey units/kubelet.server.service root@${HOST}:/etc/systemd/system/kubelet.service
done < machines.txt

# copy kubelet service for worker
for HOST in node-0 node-1; do
    scp -i secrets/sshkey units/kubelet.client.service root@${HOST}:/etc/systemd/system/kubelet.service
    ssh -i secrets/sshkey -n root@${HOST} mkdir -p /etc/kubernetes/manifests
done < machines.txt

while read IP FQDN HOST SUBNET; do
    scp -i secrets/sshkey downloads/${ARCH}/{kubelet,kubectl,kubeadm} root@${HOST}:/usr/local/bin
    ssh -i secrets/sshkey -n root@${HOST} "systemctl daemon-reload && systemctl enable kubelet"
done < machines.txt
#+end_src
* 03. Setup using kubeadm
TODO: Turn off swap
#+begin_src sh
while read IP FQDN HOST SUBNET; do
    scp -i secrets/sshkey configs/k8s.conf root@${HOST}:/etc/sysctl.d/
    ssh -i secrets/sshkey -n root@${HOST} "modprobe overlay"
    ssh -i secrets/sshkey -n root@${HOST} "modprobe br_netfilter"
    ssh -i secrets/sshkey -n root@${HOST} "echo br_netfilter > /etc/modules-load.d/br_netfilter.conf && echo overlay > /etc/modules-load.d/overlay.conf"
    ssh -i secrets/sshkey -n root@${HOST} "sysctl --system"
done < machines.txt
#+end_src

Intialize the cluster
#+begin_src sh
ssh -i secrets/sshkey root@server

SERVER_IP=192.168.68.106
SERVER_HOSTNAME=server.kubernetes.local
POD_CIDR=10.244.0.0/16
EXTRA_SERVER_SANS=server,192.168.68.106,k8s-homelab.ngdangdat.info
kubeadm init \
        --apiserver-advertise-address=${SERVER_IP} \
        --control-plane-endpoint=${SERVER_HOSTNAME} \
        --pod-network-cidr=${POD_CIDR} \
        --apiserver-cert-extra-sans=${EXTRA_SERVER_SANS}

# output
kubeadm join server.kubernetes.local:6443 --token <token> \
        --discovery-token-ca-cert-hash sha256:<discovery-token>
#+end_src

* 04. Setup account on machine
#+begin_src sh
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
#+end_src

Get token
#+begin_src sh
# Create service account
kubectl create serviceaccount remote-user

# Create cluster role binding (adjust permissions as needed)
kubectl create clusterrolebinding remote-user-binding \
  --clusterrole=cluster-admin \
  --serviceaccount=remote-user

# Generate client certificate and key
sudo kubeadm kubeconfig user --client-name=remote-user --config=/etc/kubernetes/admin.conf > remote-user.kubeconfig

# Extract the certificate and key from the kubeconfig
kubectl config view --kubeconfig=remote-user.kubeconfig --flatten --raw -o jsonpath='{.users[0].user.client-certificate-data}' | base64 -d > client.crt
kubectl config view --kubeconfig=remote-user.kubeconfig --flatten --raw -o jsonpath='{.users[0].user.client-key-data}' | base64 -d > client.key
#+end_src

Get CA base64
#+begin_src sh
# on server
cat /etc/kubernetes/pki/ca.crt

cat <<EOF > ./secrets/ca.crt
<data>
EOF
# on jumpbox
kubectl config set-cluster homelab \
          --certificate-authority=secrets/ca.crt \
          --embed-certs=true \
          --server=https://server.kubernetes.local:6443
kubectl config set-credentials remote-user \
  --client-certificate=./secrets/client.crt \
  --client-key=./secrets/client.key \
  --embed-certs=true

kubectl config set-context homelab \
  --cluster=homelab \
  --user=remote-user

# check
NS=kube-system
kubectl get po -n $NS
#+end_src

* 05. Setup flannel for CNI network
#+begin_src sh
# Needs manual creation of namespace to avoid helm error
kubectl create ns kube-flannel
kubectl label --overwrite ns kube-flannel pod-security.kubernetes.io/enforce=privileged

helm repo add flannel https://flannel-io.github.io/flannel/
helm install flannel --set podCidr="10.244.0.0/16" --namespace kube-flannel flannel/flannel
#+end_src
* 06. Label worker nodes
#+begin_src sh
kubectl label nodes node-0.kubernetes.local node-1.kubernetes.local node-role.kubernetes.io/worker=
#+end_src
* 0x. Clean up
#+begin_src sh
kubeadm reset -f
sudo rm -rf /etc/kubernetes/
sudo rm -rf /var/lib/kubelet/
sudo rm -rf ~/.kube/
#+end_src
* References
- https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/
